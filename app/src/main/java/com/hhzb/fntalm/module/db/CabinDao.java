package com.hhzb.fntalm.module.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hhzb.fntalm.bean.Cabin;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CABIN".
*/
public class CabinDao extends AbstractDao<Cabin, Long> {

    public static final String TABLENAME = "CABIN";

    /**
     * Properties of entity Cabin.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "_id");
        public final static Property CabinNo = new Property(1, int.class, "CabinNo", false, "CABIN_NO");
        public final static Property CmdNo = new Property(2, int.class, "CmdNo", false, "CMD_NO");
        public final static Property CabinType = new Property(3, int.class, "CabinType", false, "CABIN_TYPE");
        public final static Property IsUsed = new Property(4, boolean.class, "IsUsed", false, "IS_USED");
        public final static Property UseRanges = new Property(5, String.class, "UseRanges", false, "USE_RANGES");
        public final static Property IsUpload = new Property(6, boolean.class, "IsUpload", false, "IS_UPLOAD");
        public final static Property UploadDate = new Property(7, String.class, "UploadDate", false, "UPLOAD_DATE");
    };


    public CabinDao(DaoConfig config) {
        super(config);
    }
    
    public CabinDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CABIN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: ID
                "\"CABIN_NO\" INTEGER NOT NULL UNIQUE ," + // 1: CabinNo
                "\"CMD_NO\" INTEGER NOT NULL ," + // 2: CmdNo
                "\"CABIN_TYPE\" INTEGER NOT NULL ," + // 3: CabinType
                "\"IS_USED\" INTEGER NOT NULL ," + // 4: IsUsed
                "\"USE_RANGES\" TEXT," + // 5: UseRanges
                "\"IS_UPLOAD\" INTEGER NOT NULL ," + // 6: IsUpload
                "\"UPLOAD_DATE\" TEXT);"); // 7: UploadDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CABIN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Cabin entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindLong(2, entity.getCabinNo());
        stmt.bindLong(3, entity.getCmdNo());
        stmt.bindLong(4, entity.getCabinType());
        stmt.bindLong(5, entity.getIsUsed() ? 1L: 0L);
 
        String UseRanges = entity.getUseRanges();
        if (UseRanges != null) {
            stmt.bindString(6, UseRanges);
        }
        stmt.bindLong(7, entity.getIsUpload() ? 1L: 0L);
 
        String UploadDate = entity.getUploadDate();
        if (UploadDate != null) {
            stmt.bindString(8, UploadDate);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Cabin entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindLong(2, entity.getCabinNo());
        stmt.bindLong(3, entity.getCmdNo());
        stmt.bindLong(4, entity.getCabinType());
        stmt.bindLong(5, entity.getIsUsed() ? 1L: 0L);
 
        String UseRanges = entity.getUseRanges();
        if (UseRanges != null) {
            stmt.bindString(6, UseRanges);
        }
        stmt.bindLong(7, entity.getIsUpload() ? 1L: 0L);
 
        String UploadDate = entity.getUploadDate();
        if (UploadDate != null) {
            stmt.bindString(8, UploadDate);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Cabin readEntity(Cursor cursor, int offset) {
        Cabin entity = new Cabin( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.getInt(offset + 1), // CabinNo
            cursor.getInt(offset + 2), // CmdNo
            cursor.getInt(offset + 3), // CabinType
            cursor.getShort(offset + 4) != 0, // IsUsed
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // UseRanges
            cursor.getShort(offset + 6) != 0, // IsUpload
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // UploadDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Cabin entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCabinNo(cursor.getInt(offset + 1));
        entity.setCmdNo(cursor.getInt(offset + 2));
        entity.setCabinType(cursor.getInt(offset + 3));
        entity.setIsUsed(cursor.getShort(offset + 4) != 0);
        entity.setUseRanges(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsUpload(cursor.getShort(offset + 6) != 0);
        entity.setUploadDate(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Cabin entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Cabin entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
