package com.hhzb.fntalm.module.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hhzb.fntalm.bean.Admin;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ADMIN".
*/
public class AdminDao extends AbstractDao<Admin, Long> {

    public static final String TABLENAME = "ADMIN";

    /**
     * Properties of entity Admin.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "_id");
        public final static Property Name = new Property(1, String.class, "Name", false, "NAME");
        public final static Property Password = new Property(2, String.class, "Password", false, "PASSWORD");
        public final static Property Type = new Property(3, int.class, "Type", false, "TYPE");
        public final static Property Used = new Property(4, boolean.class, "Used", false, "USED");
        public final static Property CreateDate = new Property(5, String.class, "CreateDate", false, "CREATE_DATE");
    };


    public AdminDao(DaoConfig config) {
        super(config);
    }
    
    public AdminDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ADMIN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: ID
                "\"NAME\" TEXT UNIQUE ," + // 1: Name
                "\"PASSWORD\" TEXT," + // 2: Password
                "\"TYPE\" INTEGER NOT NULL ," + // 3: Type
                "\"USED\" INTEGER NOT NULL ," + // 4: Used
                "\"CREATE_DATE\" TEXT);"); // 5: CreateDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ADMIN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Admin entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(2, Name);
        }
 
        String Password = entity.getPassword();
        if (Password != null) {
            stmt.bindString(3, Password);
        }
        stmt.bindLong(4, entity.getType());
        stmt.bindLong(5, entity.getUsed() ? 1L: 0L);
 
        String CreateDate = entity.getCreateDate();
        if (CreateDate != null) {
            stmt.bindString(6, CreateDate);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Admin entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(2, Name);
        }
 
        String Password = entity.getPassword();
        if (Password != null) {
            stmt.bindString(3, Password);
        }
        stmt.bindLong(4, entity.getType());
        stmt.bindLong(5, entity.getUsed() ? 1L: 0L);
 
        String CreateDate = entity.getCreateDate();
        if (CreateDate != null) {
            stmt.bindString(6, CreateDate);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Admin readEntity(Cursor cursor, int offset) {
        Admin entity = new Admin( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Password
            cursor.getInt(offset + 3), // Type
            cursor.getShort(offset + 4) != 0, // Used
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // CreateDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Admin entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPassword(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType(cursor.getInt(offset + 3));
        entity.setUsed(cursor.getShort(offset + 4) != 0);
        entity.setCreateDate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Admin entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Admin entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
