package com.hhzb.fntalm.module.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hhzb.fntalm.bean.Input;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INPUT".
*/
public class InputDao extends AbstractDao<Input, Long> {

    public static final String TABLENAME = "INPUT";

    /**
     * Properties of entity Input.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "_id");
        public final static Property BillNo = new Property(1, String.class, "BillNo", false, "BILL_NO");
        public final static Property SiteID = new Property(2, String.class, "SiteID", false, "SITE_ID");
        public final static Property Mobile = new Property(3, String.class, "Mobile", false, "MOBILE");
        public final static Property ClothCount = new Property(4, int.class, "ClothCount", false, "CLOTH_COUNT");
        public final static Property CabinetNo = new Property(5, int.class, "CabinetNo", false, "CABINET_NO");
        public final static Property InputDate = new Property(6, String.class, "InputDate", false, "INPUT_DATE");
        public final static Property IsOut = new Property(7, Boolean.class, "IsOut", false, "IS_OUT");
        public final static Property OutDate = new Property(8, String.class, "OutDate", false, "OUT_DATE");
        public final static Property PackCode = new Property(9, String.class, "PackCode", false, "PACK_CODE");
        public final static Property IsUpload = new Property(10, Boolean.class, "IsUpload", false, "IS_UPLOAD");
        public final static Property UploadDate = new Property(11, String.class, "UploadDate", false, "UPLOAD_DATE");
        public final static Property IsCancel = new Property(12, Boolean.class, "IsCancel", false, "IS_CANCEL");
        public final static Property CancelDate = new Property(13, String.class, "CancelDate", false, "CANCEL_DATE");
    };


    public InputDao(DaoConfig config) {
        super(config);
    }
    
    public InputDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INPUT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: ID
                "\"BILL_NO\" TEXT UNIQUE ," + // 1: BillNo
                "\"SITE_ID\" TEXT," + // 2: SiteID
                "\"MOBILE\" TEXT NOT NULL ," + // 3: Mobile
                "\"CLOTH_COUNT\" INTEGER NOT NULL ," + // 4: ClothCount
                "\"CABINET_NO\" INTEGER NOT NULL ," + // 5: CabinetNo
                "\"INPUT_DATE\" TEXT NOT NULL ," + // 6: InputDate
                "\"IS_OUT\" INTEGER," + // 7: IsOut
                "\"OUT_DATE\" TEXT," + // 8: OutDate
                "\"PACK_CODE\" TEXT," + // 9: PackCode
                "\"IS_UPLOAD\" INTEGER," + // 10: IsUpload
                "\"UPLOAD_DATE\" TEXT," + // 11: UploadDate
                "\"IS_CANCEL\" INTEGER," + // 12: IsCancel
                "\"CANCEL_DATE\" TEXT);"); // 13: CancelDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INPUT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Input entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String BillNo = entity.getBillNo();
        if (BillNo != null) {
            stmt.bindString(2, BillNo);
        }
 
        String SiteID = entity.getSiteID();
        if (SiteID != null) {
            stmt.bindString(3, SiteID);
        }
        stmt.bindString(4, entity.getMobile());
        stmt.bindLong(5, entity.getClothCount());
        stmt.bindLong(6, entity.getCabinetNo());
        stmt.bindString(7, entity.getInputDate());
 
        Boolean IsOut = entity.getIsOut();
        if (IsOut != null) {
            stmt.bindLong(8, IsOut ? 1L: 0L);
        }
 
        String OutDate = entity.getOutDate();
        if (OutDate != null) {
            stmt.bindString(9, OutDate);
        }
 
        String PackCode = entity.getPackCode();
        if (PackCode != null) {
            stmt.bindString(10, PackCode);
        }
 
        Boolean IsUpload = entity.getIsUpload();
        if (IsUpload != null) {
            stmt.bindLong(11, IsUpload ? 1L: 0L);
        }
 
        String UploadDate = entity.getUploadDate();
        if (UploadDate != null) {
            stmt.bindString(12, UploadDate);
        }
 
        Boolean IsCancel = entity.getIsCancel();
        if (IsCancel != null) {
            stmt.bindLong(13, IsCancel ? 1L: 0L);
        }
 
        String CancelDate = entity.getCancelDate();
        if (CancelDate != null) {
            stmt.bindString(14, CancelDate);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Input entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String BillNo = entity.getBillNo();
        if (BillNo != null) {
            stmt.bindString(2, BillNo);
        }
 
        String SiteID = entity.getSiteID();
        if (SiteID != null) {
            stmt.bindString(3, SiteID);
        }
        stmt.bindString(4, entity.getMobile());
        stmt.bindLong(5, entity.getClothCount());
        stmt.bindLong(6, entity.getCabinetNo());
        stmt.bindString(7, entity.getInputDate());
 
        Boolean IsOut = entity.getIsOut();
        if (IsOut != null) {
            stmt.bindLong(8, IsOut ? 1L: 0L);
        }
 
        String OutDate = entity.getOutDate();
        if (OutDate != null) {
            stmt.bindString(9, OutDate);
        }
 
        String PackCode = entity.getPackCode();
        if (PackCode != null) {
            stmt.bindString(10, PackCode);
        }
 
        Boolean IsUpload = entity.getIsUpload();
        if (IsUpload != null) {
            stmt.bindLong(11, IsUpload ? 1L: 0L);
        }
 
        String UploadDate = entity.getUploadDate();
        if (UploadDate != null) {
            stmt.bindString(12, UploadDate);
        }
 
        Boolean IsCancel = entity.getIsCancel();
        if (IsCancel != null) {
            stmt.bindLong(13, IsCancel ? 1L: 0L);
        }
 
        String CancelDate = entity.getCancelDate();
        if (CancelDate != null) {
            stmt.bindString(14, CancelDate);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Input readEntity(Cursor cursor, int offset) {
        Input entity = new Input( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // BillNo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // SiteID
            cursor.getString(offset + 3), // Mobile
            cursor.getInt(offset + 4), // ClothCount
            cursor.getInt(offset + 5), // CabinetNo
            cursor.getString(offset + 6), // InputDate
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // IsOut
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // OutDate
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // PackCode
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0, // IsUpload
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // UploadDate
            cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0, // IsCancel
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // CancelDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Input entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBillNo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSiteID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMobile(cursor.getString(offset + 3));
        entity.setClothCount(cursor.getInt(offset + 4));
        entity.setCabinetNo(cursor.getInt(offset + 5));
        entity.setInputDate(cursor.getString(offset + 6));
        entity.setIsOut(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setOutDate(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPackCode(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setIsUpload(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
        entity.setUploadDate(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setIsCancel(cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0);
        entity.setCancelDate(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Input entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Input entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
