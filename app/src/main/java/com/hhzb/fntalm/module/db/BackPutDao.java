package com.hhzb.fntalm.module.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hhzb.fntalm.bean.BackPut;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BACK_PUT".
*/
public class BackPutDao extends AbstractDao<BackPut, Long> {

    public static final String TABLENAME = "BACK_PUT";

    /**
     * Properties of entity BackPut.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "_id");
        public final static Property BillNo = new Property(1, String.class, "BillNo", false, "BILL_NO");
        public final static Property Mobile = new Property(2, String.class, "Mobile", false, "MOBILE");
        public final static Property ClothCount = new Property(3, int.class, "ClothCount", false, "CLOTH_COUNT");
        public final static Property ClothNames = new Property(4, String.class, "ClothNames", false, "CLOTH_NAMES");
        public final static Property CabinetNo = new Property(5, int.class, "CabinetNo", false, "CABINET_NO");
        public final static Property BatchNo = new Property(6, int.class, "BatchNo", false, "BATCH_NO");
        public final static Property OldPrice = new Property(7, double.class, "OldPrice", false, "OLD_PRICE");
        public final static Property PayType = new Property(8, int.class, "PayType", false, "PAY_TYPE");
        public final static Property BackDate = new Property(9, String.class, "BackDate", false, "BACK_DATE");
        public final static Property IsBackShop = new Property(10, boolean.class, "IsBackShop", false, "IS_BACK_SHOP");
        public final static Property BackShopDate = new Property(11, String.class, "BackShopDate", false, "BACK_SHOP_DATE");
        public final static Property NewPrice = new Property(12, double.class, "NewPrice", false, "NEW_PRICE");
        public final static Property Rebate = new Property(13, double.class, "Rebate", false, "REBATE");
        public final static Property IsOut = new Property(14, boolean.class, "IsOut", false, "IS_OUT");
        public final static Property OutDate = new Property(15, String.class, "OutDate", false, "OUT_DATE");
        public final static Property PackCode = new Property(16, String.class, "PackCode", false, "PACK_CODE");
        public final static Property IsUpload = new Property(17, boolean.class, "IsUpload", false, "IS_UPLOAD");
        public final static Property UploadDate = new Property(18, String.class, "UploadDate", false, "UPLOAD_DATE");
    };


    public BackPutDao(DaoConfig config) {
        super(config);
    }
    
    public BackPutDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BACK_PUT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: ID
                "\"BILL_NO\" TEXT," + // 1: BillNo
                "\"MOBILE\" TEXT," + // 2: Mobile
                "\"CLOTH_COUNT\" INTEGER NOT NULL ," + // 3: ClothCount
                "\"CLOTH_NAMES\" TEXT," + // 4: ClothNames
                "\"CABINET_NO\" INTEGER NOT NULL ," + // 5: CabinetNo
                "\"BATCH_NO\" INTEGER NOT NULL ," + // 6: BatchNo
                "\"OLD_PRICE\" REAL NOT NULL ," + // 7: OldPrice
                "\"PAY_TYPE\" INTEGER NOT NULL ," + // 8: PayType
                "\"BACK_DATE\" TEXT," + // 9: BackDate
                "\"IS_BACK_SHOP\" INTEGER NOT NULL ," + // 10: IsBackShop
                "\"BACK_SHOP_DATE\" TEXT," + // 11: BackShopDate
                "\"NEW_PRICE\" REAL NOT NULL ," + // 12: NewPrice
                "\"REBATE\" REAL NOT NULL ," + // 13: Rebate
                "\"IS_OUT\" INTEGER NOT NULL ," + // 14: IsOut
                "\"OUT_DATE\" TEXT," + // 15: OutDate
                "\"PACK_CODE\" TEXT," + // 16: PackCode
                "\"IS_UPLOAD\" INTEGER NOT NULL ," + // 17: IsUpload
                "\"UPLOAD_DATE\" TEXT);"); // 18: UploadDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BACK_PUT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BackPut entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String BillNo = entity.getBillNo();
        if (BillNo != null) {
            stmt.bindString(2, BillNo);
        }
 
        String Mobile = entity.getMobile();
        if (Mobile != null) {
            stmt.bindString(3, Mobile);
        }
        stmt.bindLong(4, entity.getClothCount());
 
        String ClothNames = entity.getClothNames();
        if (ClothNames != null) {
            stmt.bindString(5, ClothNames);
        }
        stmt.bindLong(6, entity.getCabinetNo());
        stmt.bindLong(7, entity.getBatchNo());
        stmt.bindDouble(8, entity.getOldPrice());
        stmt.bindLong(9, entity.getPayType());
 
        String BackDate = entity.getBackDate();
        if (BackDate != null) {
            stmt.bindString(10, BackDate);
        }
        stmt.bindLong(11, entity.getIsBackShop() ? 1L: 0L);
 
        String BackShopDate = entity.getBackShopDate();
        if (BackShopDate != null) {
            stmt.bindString(12, BackShopDate);
        }
        stmt.bindDouble(13, entity.getNewPrice());
        stmt.bindDouble(14, entity.getRebate());
        stmt.bindLong(15, entity.getIsOut() ? 1L: 0L);
 
        String OutDate = entity.getOutDate();
        if (OutDate != null) {
            stmt.bindString(16, OutDate);
        }
 
        String PackCode = entity.getPackCode();
        if (PackCode != null) {
            stmt.bindString(17, PackCode);
        }
        stmt.bindLong(18, entity.getIsUpload() ? 1L: 0L);
 
        String UploadDate = entity.getUploadDate();
        if (UploadDate != null) {
            stmt.bindString(19, UploadDate);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BackPut entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String BillNo = entity.getBillNo();
        if (BillNo != null) {
            stmt.bindString(2, BillNo);
        }
 
        String Mobile = entity.getMobile();
        if (Mobile != null) {
            stmt.bindString(3, Mobile);
        }
        stmt.bindLong(4, entity.getClothCount());
 
        String ClothNames = entity.getClothNames();
        if (ClothNames != null) {
            stmt.bindString(5, ClothNames);
        }
        stmt.bindLong(6, entity.getCabinetNo());
        stmt.bindLong(7, entity.getBatchNo());
        stmt.bindDouble(8, entity.getOldPrice());
        stmt.bindLong(9, entity.getPayType());
 
        String BackDate = entity.getBackDate();
        if (BackDate != null) {
            stmt.bindString(10, BackDate);
        }
        stmt.bindLong(11, entity.getIsBackShop() ? 1L: 0L);
 
        String BackShopDate = entity.getBackShopDate();
        if (BackShopDate != null) {
            stmt.bindString(12, BackShopDate);
        }
        stmt.bindDouble(13, entity.getNewPrice());
        stmt.bindDouble(14, entity.getRebate());
        stmt.bindLong(15, entity.getIsOut() ? 1L: 0L);
 
        String OutDate = entity.getOutDate();
        if (OutDate != null) {
            stmt.bindString(16, OutDate);
        }
 
        String PackCode = entity.getPackCode();
        if (PackCode != null) {
            stmt.bindString(17, PackCode);
        }
        stmt.bindLong(18, entity.getIsUpload() ? 1L: 0L);
 
        String UploadDate = entity.getUploadDate();
        if (UploadDate != null) {
            stmt.bindString(19, UploadDate);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BackPut readEntity(Cursor cursor, int offset) {
        BackPut entity = new BackPut( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // BillNo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Mobile
            cursor.getInt(offset + 3), // ClothCount
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ClothNames
            cursor.getInt(offset + 5), // CabinetNo
            cursor.getInt(offset + 6), // BatchNo
            cursor.getDouble(offset + 7), // OldPrice
            cursor.getInt(offset + 8), // PayType
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // BackDate
            cursor.getShort(offset + 10) != 0, // IsBackShop
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // BackShopDate
            cursor.getDouble(offset + 12), // NewPrice
            cursor.getDouble(offset + 13), // Rebate
            cursor.getShort(offset + 14) != 0, // IsOut
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // OutDate
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // PackCode
            cursor.getShort(offset + 17) != 0, // IsUpload
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18) // UploadDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BackPut entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBillNo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMobile(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setClothCount(cursor.getInt(offset + 3));
        entity.setClothNames(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCabinetNo(cursor.getInt(offset + 5));
        entity.setBatchNo(cursor.getInt(offset + 6));
        entity.setOldPrice(cursor.getDouble(offset + 7));
        entity.setPayType(cursor.getInt(offset + 8));
        entity.setBackDate(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setIsBackShop(cursor.getShort(offset + 10) != 0);
        entity.setBackShopDate(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setNewPrice(cursor.getDouble(offset + 12));
        entity.setRebate(cursor.getDouble(offset + 13));
        entity.setIsOut(cursor.getShort(offset + 14) != 0);
        entity.setOutDate(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setPackCode(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setIsUpload(cursor.getShort(offset + 17) != 0);
        entity.setUploadDate(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BackPut entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BackPut entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
